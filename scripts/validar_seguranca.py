#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Valida√ß√£o de Seguran√ßa - Dashboard de Tarefas
Executa verifica√ß√µes de seguran√ßa no projeto.
"""

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.append(str(Path(__file__).parent.parent))

try:
    from core.seguranca import seguranca_manager
    from config.settings import Settings
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    sys.exit(1)


def main():
    """Fun√ß√£o principal do script de valida√ß√£o."""
    print("üîí VALIDA√á√ÉO DE SEGURAN√áA - DASHBOARD DE TAREFAS")
    print("=" * 60)
    print()
    
    # Obter caminho do projeto
    projeto_path = Path(__file__).parent.parent
    
    # 1. Validar configura√ß√µes de seguran√ßa
    print("üìã 1. VALIDANDO CONFIGURA√á√ïES DE SEGURAN√áA")
    print("-" * 40)
    
    try:
        settings = Settings()
        resultado_config = settings.validar_configuracoes_seguranca()
        
        if resultado_config["valido"]:
            print("‚úÖ Configura√ß√µes de seguran√ßa v√°lidas")
        else:
            print("‚ùå Problemas encontrados:")
            for problema in resultado_config["problemas"]:
                print(f"   - {problema}")
        
        if resultado_config["avisos"]:
            print("‚ö†Ô∏è Avisos:")
            for aviso in resultado_config["avisos"]:
                print(f"   - {aviso}")
        
    except Exception as e:
        print(f"‚ùå Erro ao validar configura√ß√µes: {e}")
    
    print()
    
    # 2. Verificar vari√°veis de ambiente
    print("üåç 2. VERIFICANDO VARI√ÅVEIS DE AMBIENTE")
    print("-" * 40)
    
    vars_env = seguranca_manager.verificar_variaveis_ambiente()
    
    print("Obrigat√≥rias:")
    for var, status in vars_env["obrigatorias"].items():
        print(f"   {var}: {status}")
    
    print()
    print("Opcionais:")
    for var, status in vars_env["opcionais"].items():
        print(f"   {var}: {status}")
    
    print()
    
    # 3. Validar arquivos do projeto
    print("üìÅ 3. VALIDANDO ARQUIVOS DO PROJETO")
    print("-" * 40)
    
    resultados = seguranca_manager.validar_diretorio(str(projeto_path))
    
    if resultados:
        print(f"‚ö†Ô∏è Encontrados {len(resultados)} arquivos com poss√≠veis problemas:")
        for resultado in resultados:
            print(f"\nüìÑ {resultado['arquivo']}")
            if resultado["problemas"]:
                print("   ‚ùå Problemas:")
                for problema in resultado["problemas"]:
                    print(f"      - {problema}")
            if resultado["avisos"]:
                print("   ‚ö†Ô∏è Avisos:")
                for aviso in resultado["avisos"]:
                    print(f"      - {aviso}")
    else:
        print("‚úÖ Nenhum problema de seguran√ßa encontrado nos arquivos")
    
    print()
    
    # 4. Gerar relat√≥rio completo
    print("üìä 4. RELAT√ìRIO COMPLETO")
    print("-" * 40)
    
    relatorio = seguranca_manager.gerar_relatorio_seguranca(str(projeto_path))
    print(relatorio)
    
    print()
    
    # 5. Resumo final
    print("üéØ RESUMO FINAL")
    print("-" * 40)
    
    total_problemas = len(vars_env["faltando_obrigatorias"]) + len(resultados)
    
    if total_problemas == 0:
        print("‚úÖ PROJETO SEGURO!")
        print("   Todas as verifica√ß√µes de seguran√ßa passaram com sucesso.")
    else:
        print(f"‚ö†Ô∏è ATEN√á√ÉO: {total_problemas} problema(s) encontrado(s)")
        print("   Revise as configura√ß√µes antes de prosseguir.")
    
    print()
    print("üí° DICAS DE SEGURAN√áA:")
    print("   - Configure as vari√°veis de ambiente obrigat√≥rias")
    print("   - Use senhas fortes e √∫nicas")
    print("   - Nunca commite credenciais no c√≥digo")
    print("   - Execute este script regularmente")
    print("   - Mantenha as depend√™ncias atualizadas")
    
    return total_problemas == 0


if __name__ == "__main__":
    try:
        sucesso = main()
        sys.exit(0 if sucesso else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Valida√ß√£o interrompida pelo utilizador")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1) 