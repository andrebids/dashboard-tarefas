# -*- coding: utf-8 -*-
"""
Componente de Sincroniza√ß√£o - Gerencia sincroniza√ß√£o entre produ√ß√£o e desenvolvimento.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading
from typing import Dict, Callable


class SyncManager(ttk.LabelFrame):
    """
    Componente para gerenciar sincroniza√ß√£o entre produ√ß√£o e desenvolvimento.
    """
    
    def __init__(self, parent, controller, **kwargs):
        """
        Inicializa o componente de sincroniza√ß√£o.
        
        Args:
            parent: Widget pai
            controller: Controlador principal
            **kwargs: Argumentos adicionais para ttk.LabelFrame
        """
        super().__init__(parent, text="üîÑ Sincroniza√ß√£o Produ√ß√£o ‚Üî Desenvolvimento", **kwargs)
        
        self.parent = parent
        self.controller = controller
        
        # Configurar grid
        self.columnconfigure(0, weight=1)
        
        # Inicializar componentes
        self._criar_componentes()
        
        # Verificar status inicial
        self._verificar_status_inicial()
    
    def _criar_componentes(self):
        """Cria os componentes da interface."""
        # Frame de status
        self.frame_status = ttk.Frame(self)
        self.frame_status.grid(row=0, column=0, sticky="ew", padx=10, pady=5)
        self.frame_status.columnconfigure(1, weight=1)
        
        # Label de status
        self.label_status = ttk.Label(self.frame_status, text="Status:", font=("Arial", 9, "bold"))
        self.label_status.grid(row=0, column=0, sticky="w", padx=(0, 10))
        
        # Label de valor do status
        self.label_status_valor = ttk.Label(self.frame_status, text="Verificando...", foreground="gray")
        self.label_status_valor.grid(row=0, column=1, sticky="w")
        
        # Frame de informa√ß√µes
        self.frame_info = ttk.Frame(self)
        self.frame_info.grid(row=1, column=0, sticky="ew", padx=10, pady=5)
        self.frame_info.columnconfigure(0, weight=1)
        
        # Label de informa√ß√µes
        self.label_info = ttk.Label(self.frame_info, text="", foreground="gray", wraplength=400)
        self.label_info.grid(row=0, column=0, sticky="w")
        
        # Frame de bot√µes
        self.frame_botoes = ttk.Frame(self)
        self.frame_botoes.grid(row=2, column=0, sticky="ew", padx=10, pady=10)
        self.frame_botoes.columnconfigure(0, weight=1)
        self.frame_botoes.columnconfigure(1, weight=1)
        
        # Bot√£o sincronizar
        self.btn_sincronizar = ttk.Button(
            self.frame_botoes,
            text="üîÑ Sincronizar Produ√ß√£o",
            command=self._sincronizar_producao,
            style="Accent.TButton"
        )
        self.btn_sincronizar.grid(row=0, column=0, sticky="ew", padx=(0, 5))
        
        # Bot√£o configurar sempre desenvolvimento
        self.btn_configurar_sempre = ttk.Button(
            self.frame_botoes,
            text="‚öôÔ∏è Configurar Sempre Dev",
            command=self._configurar_sempre_desenvolvimento,
            style="Accent.TButton"
        )
        self.btn_configurar_sempre.grid(row=0, column=1, sticky="ew", padx=(5, 0))
        
        # Bot√£o restaurar
        self.btn_restaurar = ttk.Button(
            self.frame_botoes,
            text="‚Ü©Ô∏è Restaurar Original",
            command=self._restaurar_original
        )
        self.btn_restaurar.grid(row=1, column=0, sticky="ew", padx=(0, 5))
        
        # Bot√£o verificar
        self.btn_verificar = ttk.Button(
            self.frame_botoes,
            text="üîç Verificar Status",
            command=self._verificar_status
        )
        self.btn_verificar.grid(row=1, column=1, sticky="ew", padx=(5, 0))
        
        # Frame de bot√µes de produ√ß√£o avan√ßada
        self.frame_producao_avancada = ttk.Frame(self)
        self.frame_producao_avancada.grid(row=3, column=0, sticky="ew", padx=10, pady=(5, 10))
        self.frame_producao_avancada.columnconfigure(0, weight=1)
        self.frame_producao_avancada.columnconfigure(1, weight=1)
        
        # Separador visual
        separator = ttk.Separator(self.frame_producao_avancada, orient='horizontal')
        separator.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        
        # Label para se√ß√£o de produ√ß√£o avan√ßada
        label_producao = ttk.Label(self.frame_producao_avancada, text="üîß Produ√ß√£o Avan√ßada", 
                                  font=("Arial", 9, "bold"))
        label_producao.grid(row=1, column=0, columnspan=2, sticky="w", pady=(0, 5))
        
        # Bot√£o produ√ß√£o com modifica√ß√µes
        self.btn_producao_modificacoes = ttk.Button(
            self.frame_producao_avancada,
            text="üîß Produ√ß√£o com Modifica√ß√µes",
            command=self._producao_com_modificacoes,
            style="Accent.TButton"
        )
        self.btn_producao_modificacoes.grid(row=2, column=0, sticky="ew", padx=(0, 5))
        
        # Bot√£o diagn√≥stico produ√ß√£o
        self.btn_diagnostico_producao = ttk.Button(
            self.frame_producao_avancada,
            text="üîç Diagn√≥stico Produ√ß√£o",
            command=self._diagnostico_producao
        )
        self.btn_diagnostico_producao.grid(row=2, column=1, sticky="ew", padx=(5, 0))
    
    def _verificar_status_inicial(self):
        """Verifica o status inicial da sincroniza√ß√£o."""
        try:
            # Executar em thread separada para n√£o bloquear a interface
            thread = threading.Thread(target=self._verificar_status_thread)
            thread.daemon = True
            thread.start()
        except Exception as e:
            self._atualizar_status("Erro", f"Erro ao verificar status: {str(e)}", "error")
    
    def _verificar_status_thread(self):
        """Verifica o status em thread separada."""
        try:
            status_info = self.controller.verificar_sincronizacao_producao()
            self._atualizar_status_thread(status_info)
        except Exception as e:
            self._atualizar_status("Erro", f"Erro ao verificar status: {str(e)}", "error")
    
    def _atualizar_status_thread(self, status_info: Dict):
        """Atualiza o status na thread principal."""
        try:
            self.after(0, lambda: self._atualizar_status_from_info(status_info))
        except Exception as e:
            print(f"Erro ao atualizar status: {str(e)}")
    
    def _atualizar_status_from_info(self, status_info: Dict):
        """Atualiza o status baseado nas informa√ß√µes recebidas."""
        try:
            sincronizada = status_info.get("sincronizada", False)
            motivo = status_info.get("motivo", "Desconhecido")
            backup_existe = status_info.get("backup_existe", False)
            modo_atual = status_info.get("modo_atual", "desconhecido")
            
            if sincronizada:
                status_text = "‚úÖ Sincronizada"
                status_color = "green"
                info_text = f"Produ√ß√£o usa c√≥digo de desenvolvimento\nModo atual: {modo_atual}"
            else:
                status_text = "‚ùå N√£o Sincronizada"
                status_color = "red"
                info_text = f"Produ√ß√£o usa imagem oficial\nModo atual: {modo_atual}\nBackup: {'Sim' if backup_existe else 'N√£o'}"
            
            self._atualizar_status(status_text, info_text, status_color)
            
        except Exception as e:
            self._atualizar_status("Erro", f"Erro ao processar status: {str(e)}", "error")
    
    def _atualizar_status(self, status: str, info: str, cor: str = "black"):
        """Atualiza o status na interface."""
        try:
            self.label_status_valor.config(text=status, foreground=cor)
            self.label_info.config(text=info)
        except Exception as e:
            print(f"Erro ao atualizar status: {str(e)}")
    
    def _configurar_sempre_desenvolvimento(self):
        """Configura produ√ß√£o para sempre usar desenvolvimento."""
        try:
            # Confirmar a√ß√£o
            resposta = messagebox.askyesno(
                "Configurar Produ√ß√£o para Sempre Usar Desenvolvimento",
                "Isso ir√° configurar a produ√ß√£o para SEMPRE usar o c√≥digo de desenvolvimento.\n\n"
                "A partir de agora, sempre que voc√™ iniciar a produ√ß√£o, ela usar√° automaticamente "
                "o c√≥digo mais recente do desenvolvimento.\n\n"
                "Deseja continuar?"
            )
            
            if resposta:
                # Desabilitar bot√µes durante opera√ß√£o
                self._desabilitar_botoes()
                
                # Executar em thread separada
                thread = threading.Thread(target=self._configurar_sempre_thread)
                thread.daemon = True
                thread.start()
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao configurar: {str(e)}")
    
    def _configurar_sempre_thread(self):
        """Executa configura√ß√£o em thread separada."""
        try:
            # Executar configura√ß√£o
            self.controller.configurar_producao_sempre_desenvolvimento()
            
            # Aguardar um pouco
            import time
            time.sleep(2)
            
            # Verificar novo status
            status_info = self.controller.verificar_sincronizacao_producao()
            
            # Atualizar interface na thread principal
            self.after(0, lambda: self._finalizar_configuracao_sempre(status_info))
            
        except Exception as e:
            self.after(0, lambda: self._erro_configuracao_sempre(str(e)))
    
    def _finalizar_configuracao_sempre(self, status_info: Dict):
        """Finaliza a configura√ß√£o."""
        try:
            # Reabilitar bot√µes
            self._habilitar_botoes()
            
            # Atualizar status
            self._atualizar_status_from_info(status_info)
            
            # Mostrar mensagem de sucesso
            if status_info.get("sincronizada", False):
                messagebox.showinfo(
                    "Configura√ß√£o Conclu√≠da",
                    "Produ√ß√£o configurada para sempre usar desenvolvimento!\n\n"
                    "A partir de agora:\n"
                    "‚úÖ Produ√ß√£o sempre usa c√≥digo de desenvolvimento\n"
                    "‚úÖ Build autom√°tico a cada reinicializa√ß√£o\n"
                    "‚úÖ Sempre atualizado com suas modifica√ß√µes\n\n"
                    "Reinicie o Planka para aplicar as mudan√ßas."
                )
            else:
                messagebox.showwarning(
                    "Configura√ß√£o Falhou",
                    "A configura√ß√£o n√£o foi conclu√≠da com sucesso.\n\n"
                    "Verifique os logs para mais detalhes."
                )
                
        except Exception as e:
            self._erro_configuracao_sempre(str(e))
    
    def _erro_configuracao_sempre(self, erro: str):
        """Trata erro na configura√ß√£o."""
        try:
            # Reabilitar bot√µes
            self._habilitar_botoes()
            
            # Mostrar erro
            messagebox.showerror("Erro na Configura√ß√£o", f"Erro: {erro}")
            
        except Exception as e:
            print(f"Erro ao tratar erro de configura√ß√£o: {str(e)}")

    def _sincronizar_producao(self):
        """Sincroniza produ√ß√£o com desenvolvimento."""
        try:
            # Confirmar a√ß√£o
            resposta = messagebox.askyesno(
                "Confirmar Sincroniza√ß√£o",
                "Isso ir√° modificar o docker-compose.yml para usar o c√≥digo de desenvolvimento em produ√ß√£o.\n\n"
                "Deseja continuar?"
            )
            
            if resposta:
                # Desabilitar bot√µes durante opera√ß√£o
                self._desabilitar_botoes()
                
                # Executar em thread separada
                thread = threading.Thread(target=self._sincronizar_thread)
                thread.daemon = True
                thread.start()
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao sincronizar: {str(e)}")
    
    def _sincronizar_thread(self):
        """Executa sincroniza√ß√£o em thread separada."""
        try:
            # Executar sincroniza√ß√£o
            self.controller.sincronizar_producao_com_desenvolvimento()
            
            # Aguardar um pouco
            import time
            time.sleep(2)
            
            # Verificar novo status
            status_info = self.controller.verificar_sincronizacao_producao()
            
            # Atualizar interface na thread principal
            self.after(0, lambda: self._finalizar_sincronizacao(status_info))
            
        except Exception as e:
            self.after(0, lambda: self._erro_sincronizacao(str(e)))
    
    def _finalizar_sincronizacao(self, status_info: Dict):
        """Finaliza a sincroniza√ß√£o."""
        try:
            # Reabilitar bot√µes
            self._habilitar_botoes()
            
            # Atualizar status
            self._atualizar_status_from_info(status_info)
            
            # Mostrar mensagem de sucesso
            if status_info.get("sincronizada", False):
                messagebox.showinfo(
                    "Sincroniza√ß√£o Conclu√≠da",
                    "Produ√ß√£o foi sincronizada com desenvolvimento!\n\n"
                    "Reinicie o Planka para aplicar as mudan√ßas."
                )
            else:
                messagebox.showwarning(
                    "Sincroniza√ß√£o Falhou",
                    "A sincroniza√ß√£o n√£o foi conclu√≠da com sucesso.\n\n"
                    "Verifique os logs para mais detalhes."
                )
                
        except Exception as e:
            self._erro_sincronizacao(str(e))
    
    def _erro_sincronizacao(self, erro: str):
        """Trata erro na sincroniza√ß√£o."""
        try:
            # Reabilitar bot√µes
            self._habilitar_botoes()
            
            # Mostrar erro
            messagebox.showerror("Erro na Sincroniza√ß√£o", f"Erro: {erro}")
            
        except Exception as e:
            print(f"Erro ao tratar erro de sincroniza√ß√£o: {str(e)}")
    
    def _restaurar_original(self):
        """Restaura a vers√£o original."""
        try:
            # Confirmar a√ß√£o
            resposta = messagebox.askyesno(
                "Confirmar Restaura√ß√£o",
                "Isso ir√° restaurar o docker-compose.yml original (imagem oficial).\n\n"
                "Deseja continuar?"
            )
            
            if resposta:
                # Desabilitar bot√µes durante opera√ß√£o
                self._desabilitar_botoes()
                
                # Executar em thread separada
                thread = threading.Thread(target=self._restaurar_thread)
                thread.daemon = True
                thread.start()
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao restaurar: {str(e)}")
    
    def _restaurar_thread(self):
        """Executa restaura√ß√£o em thread separada."""
        try:
            # Executar restaura√ß√£o
            self.controller.restaurar_producao_original()
            
            # Aguardar um pouco
            import time
            time.sleep(2)
            
            # Verificar novo status
            status_info = self.controller.verificar_sincronizacao_producao()
            
            # Atualizar interface na thread principal
            self.after(0, lambda: self._finalizar_restauracao(status_info))
            
        except Exception as e:
            self.after(0, lambda: self._erro_restauracao(str(e)))
    
    def _finalizar_restauracao(self, status_info: Dict):
        """Finaliza a restaura√ß√£o."""
        try:
            # Reabilitar bot√µes
            self._habilitar_botoes()
            
            # Atualizar status
            self._atualizar_status_from_info(status_info)
            
            # Mostrar mensagem de sucesso
            if not status_info.get("sincronizada", True):
                messagebox.showinfo(
                    "Restaura√ß√£o Conclu√≠da",
                    "Produ√ß√£o foi restaurada para vers√£o original!\n\n"
                    "Reinicie o Planka para aplicar as mudan√ßas."
                )
            else:
                messagebox.showwarning(
                    "Restaura√ß√£o Falhou",
                    "A restaura√ß√£o n√£o foi conclu√≠da com sucesso.\n\n"
                    "Verifique os logs para mais detalhes."
                )
                
        except Exception as e:
            self._erro_restauracao(str(e))
    
    def _erro_restauracao(self, erro: str):
        """Trata erro na restaura√ß√£o."""
        try:
            # Reabilitar bot√µes
            self._habilitar_botoes()
            
            # Mostrar erro
            messagebox.showerror("Erro na Restaura√ß√£o", f"Erro: {erro}")
            
        except Exception as e:
            print(f"Erro ao tratar erro de restaura√ß√£o: {str(e)}")
    
    def _verificar_status(self):
        """Verifica o status atual."""
        try:
            # Desabilitar bot√£o temporariamente
            self.btn_verificar.config(state="disabled")
            
            # Executar em thread separada
            thread = threading.Thread(target=self._verificar_status_thread)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao verificar status: {str(e)}")
            self.btn_verificar.config(state="normal")
    
    def _desabilitar_botoes(self):
        """Desabilita os bot√µes durante opera√ß√µes."""
        try:
            self.btn_sincronizar.config(state="disabled")
            self.btn_restaurar.config(state="disabled")
            self.btn_verificar.config(state="disabled")
            self.btn_configurar_sempre.config(state="disabled")
            self.btn_producao_modificacoes.config(state="disabled")
            self.btn_diagnostico_producao.config(state="disabled")
        except Exception as e:
            print(f"Erro ao desabilitar bot√µes: {str(e)}")
    
    def _habilitar_botoes(self):
        """Habilita os bot√µes ap√≥s opera√ß√µes."""
        try:
            self.btn_sincronizar.config(state="normal")
            self.btn_restaurar.config(state="normal")
            self.btn_verificar.config(state="normal")
            self.btn_configurar_sempre.config(state="normal")
            self.btn_producao_modificacoes.config(state="normal")
            self.btn_diagnostico_producao.config(state="normal")
        except Exception as e:
            print(f"Erro ao habilitar bot√µes: {str(e)}")
    
    def atualizar_status(self):
        """Atualiza o status da sincroniza√ß√£o."""
        try:
            self._verificar_status_inicial()
        except Exception as e:
            print(f"Erro ao atualizar status: {str(e)}")
    
    def _producao_com_modificacoes(self):
        """Executa produ√ß√£o com modifica√ß√µes locais."""
        if not messagebox.askyesno("Produ√ß√£o com Modifica√ß√µes", 
                                  "Deseja executar produ√ß√£o com modifica√ß√µes locais?\n\n"
                                  "‚Ä¢ Gera secret key segura automaticamente\n"
                                  "‚Ä¢ Configura admin user automaticamente\n"
                                  "‚Ä¢ Aplica melhores pr√°ticas da documenta√ß√£o\n"
                                  "‚Ä¢ Acesso: http://localhost:3000"):
            return
        
        try:
            self._desabilitar_botoes()
            self._atualizar_status("Executando produ√ß√£o com modifica√ß√µes...", "Executando...", "blue")
            
            # Executar em thread separada
            thread = threading.Thread(target=self._executar_producao_modificacoes, daemon=True)
            thread.start()
            
        except Exception as e:
            self._erro_producao_modificacoes(str(e))
    
    def _executar_producao_modificacoes(self):
        """Executa produ√ß√£o com modifica√ß√µes em thread separada."""
        try:
            # Importar o PlankaManager
            from core.planka import PlankaManager
            
            # Criar inst√¢ncia do PlankaManager
            planka_manager = PlankaManager(self.controller.settings)
            
            # Executar produ√ß√£o com modifica√ß√µes
            sucesso, mensagem = planka_manager.executar_producao_com_modificacoes_locais()
            
            if sucesso:
                self._finalizar_producao_modificacoes({"status": "sucesso", "mensagem": mensagem})
            else:
                self._erro_producao_modificacoes(mensagem)
            
        except Exception as e:
            self._erro_producao_modificacoes(str(e))
    
    def _finalizar_producao_modificacoes(self, resultado: Dict):
        """Finaliza execu√ß√£o de produ√ß√£o com modifica√ß√µes."""
        try:
            self._habilitar_botoes()
            self._atualizar_status("Produ√ß√£o com modifica√ß√µes ativa", "Sucesso!", "green")
            
            # Mostrar mensagem de sucesso
            messagebox.showinfo("Sucesso", 
                              f"Produ√ß√£o com modifica√ß√µes iniciada com sucesso!\n\n"
                              f"üåê Acesso: http://localhost:3000\n"
                              f"üë§ Admin user configurado automaticamente\n\n"
                              f"{resultado.get('mensagem', '')}")
            
        except Exception as e:
            self._erro_producao_modificacoes(str(e))
    
    def _erro_producao_modificacoes(self, erro: str):
        """Trata erro na produ√ß√£o com modifica√ß√µes."""
        try:
            self._habilitar_botoes()
            self._atualizar_status("Erro na produ√ß√£o", f"Erro: {erro}", "red")
            
            # Mostrar mensagem de erro
            messagebox.showerror("Erro", f"Erro ao executar produ√ß√£o com modifica√ß√µes:\n\n{erro}")
            
        except Exception as e:
            print(f"Erro ao tratar erro de produ√ß√£o: {str(e)}")
    
    def _diagnostico_producao(self):
        """Executa diagn√≥stico da configura√ß√£o de produ√ß√£o."""
        if not messagebox.askyesno("Diagn√≥stico de Produ√ß√£o", 
                                  "Deseja executar diagn√≥stico completo da configura√ß√£o de produ√ß√£o?\n\n"
                                  "‚Ä¢ Verifica containers e configura√ß√µes\n"
                                  "‚Ä¢ Analisa logs detalhados\n"
                                  "‚Ä¢ Verifica admin user e secret key\n"
                                  "‚Ä¢ Testa conectividade"):
            return
        
        try:
            self._desabilitar_botoes()
            self._atualizar_status("Executando diagn√≥stico...", "Analisando...", "blue")
            
            # Executar em thread separada
            thread = threading.Thread(target=self._executar_diagnostico_producao, daemon=True)
            thread.start()
            
        except Exception as e:
            self._erro_diagnostico_producao(str(e))
    
    def _executar_diagnostico_producao(self):
        """Executa diagn√≥stico de produ√ß√£o em thread separada."""
        try:
            # Importar o PlankaManager
            from core.planka import PlankaManager
            
            # Criar inst√¢ncia do PlankaManager
            planka_manager = PlankaManager(self.controller.settings)
            
            # Executar diagn√≥stico
            resultado = planka_manager.diagnosticar_producao()
            
            self._finalizar_diagnostico_producao(resultado)
            
        except Exception as e:
            self._erro_diagnostico_producao(str(e))
    
    def _finalizar_diagnostico_producao(self, resultado: Dict):
        """Finaliza diagn√≥stico de produ√ß√£o."""
        try:
            self._habilitar_botoes()
            
            # Preparar mensagem de resultado
            status_geral = resultado.get('status_geral', 'N/A')
            containers_ativos = resultado.get('containers_ativos', 0)
            secret_key_valida = resultado.get('secret_key_valida', False)
            admin_user_existe = resultado.get('admin_user_existe', False)
            porta_acessivel = resultado.get('porta_acessivel', False)
            
            problemas = resultado.get('problemas', [])
            
            # Determinar cor do status
            if problemas:
                cor = "red"
                status_texto = "Problemas encontrados"
            else:
                cor = "green"
                status_texto = "Diagn√≥stico OK"
            
            self._atualizar_status(status_texto, f"Status: {status_geral}", cor)
            
            # Preparar mensagem detalhada
            mensagem = f"üìä Resultados do Diagn√≥stico:\n\n"
            mensagem += f"‚Ä¢ Status geral: {status_geral}\n"
            mensagem += f"‚Ä¢ Containers ativos: {containers_ativos}\n"
            mensagem += f"‚Ä¢ Secret key v√°lida: {'‚úÖ' if secret_key_valida else '‚ùå'}\n"
            mensagem += f"‚Ä¢ Admin user existe: {'‚úÖ' if admin_user_existe else '‚ùå'}\n"
            mensagem += f"‚Ä¢ Porta acess√≠vel: {'‚úÖ' if porta_acessivel else '‚ùå'}\n\n"
            
            if problemas:
                mensagem += "‚ö†Ô∏è Problemas encontrados:\n"
                for problema in problemas:
                    mensagem += f"‚Ä¢ {problema}\n"
            else:
                mensagem += "‚úÖ Nenhum problema encontrado!"
            
            # Mostrar resultado
            messagebox.showinfo("Diagn√≥stico de Produ√ß√£o", mensagem)
            
        except Exception as e:
            self._erro_diagnostico_producao(str(e))
    
    def _erro_diagnostico_producao(self, erro: str):
        """Trata erro no diagn√≥stico de produ√ß√£o."""
        try:
            self._habilitar_botoes()
            self._atualizar_status("Erro no diagn√≥stico", f"Erro: {erro}", "red")
            
            # Mostrar mensagem de erro
            messagebox.showerror("Erro", f"Erro ao executar diagn√≥stico de produ√ß√£o:\n\n{erro}")
            
        except Exception as e:
            print(f"Erro ao tratar erro de diagn√≥stico: {str(e)}") 